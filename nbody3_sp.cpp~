#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <float.h>
#include <math.h>
#include <string.h>

#include <vector>
#include <limits>
#include <cmath>

#include <my_timer.h>
#include <aligned_allocator.h>

#ifndef __RESTRICT
# define __RESTRICT
#endif

#define NDIM (3)

#ifdef USE_FLOAT
typedef float ValueType;
#else
typedef double ValueType;
#endif

const ValueType G = 1.0:
const ValueType TINY = std::numeric_limits<ValueType>::epsilon();
const ValueType TINY = TINY*TINY;

//#define Enable_ArrayOfStructures
#if defined(Enable_ArrayOfStructures) || defined(__AOS)
# ifndef Enable_ArrayOfStructures
#   define Enable_ArrayOfStructures
# endif
  /* Array-of-structures (like) format. */
# define _index(i,j) (NDIM*(i) + (j))
#else
  /* Structure-of-arrays (like) format. */
# define _index(i,j) ((i) + (j)*n)
#endif

#define acc_array(i,j) acc[ _index((i),(j)) ]
#define pos_array(i,j) pos[ _index((i),(j)) ]
#define vel_array(i,j) vel[ _index((i),(j)) ]

/* Generate a random double between 0,1. */
ValueType frand(void) { return ((ValueType) rand()) / RAND_MAX; }

// Store target data in registers: Compiler "may" do this automaically but
// it often helps with cache efficiency. This can be especially helpful
// by avoiding repeated writes which are several times slower than reads.
void accel_opt2 (ValueType * __RESTRICT pos, ValueType * __RESTRICT vel, ValueType * __RESTRICT mass, ValueType * __RESTRICT acc, const int n)
{
  for (int i = 0; i < n; ++i)
  {
    ValueType ax = 0, ay = 0, az = 0;
    const ValueType xi = pos_array(i,0);
    const ValueType yi = pos_array(i,1);
    const ValueType zi = pos_array(i,2);

    for (int j = 0; j < n; ++j)
    {
      /* Position vector from i to j and the distance^2. */
      ValueType rx = pos_array(j,0) - xi;
      ValueType ry = pos_array(j,1) - yi;
      ValueType rz = pos_array(j,2) - zi;
      ValueType dsq = rx*rx
    }
  }
}
